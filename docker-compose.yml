version: '3'

services:
  # Target application to be scanned
  juice-shop:
    image: bkimminich/juice-shop
    ports:
      - "3000:3000"              # Expose Juice Shop on localhost:3000
    networks:
      - zap-network               # Connect to shared network (added this for consistency)

  # ZAP with Web UI for manual testing and learning
  zap-ui:
    image: zaproxy/zap-stable
    command: zap-webswing.sh      # Start ZAP with web-based GUI
    ports:
      - "8080:8080"              # Access ZAP UI at http://localhost:8080/zap/
    networks:
      - zap-network              # Connect to shared network for container communication

  # Baseline scan service - passive scanning only (safe, fast)
  baseline-scan:
    image: zaproxy/zap-stable
    volumes:
      - ./reports:/zap/wrk:rw    # Mount local ./reports folder to save scan results
      # Creates 'reports' folder in current directory if not exists
    command: zap-baseline.py -t http://juice-shop:3000 -r baseline-report.html
    #        ^ Script to run    ^ Target URL using container name   ^ Output file
    profiles:
      - scan                     # Only runs when --profile scan is specified
      # Prevents automatic start with docker-compose up
    networks:
      - zap-network             # Same network to reach juice-shop by name

  # Full scan service - active attacks (finds real vulnerabilities)
  full-scan:
    image: zaproxy/zap-stable
    volumes:
      - ./reports:/zap/wrk:rw   # Same volume mount for reports
    command: zap-full-scan.py -t http://juice-shop:3000 -r full-scan-report.html -m 10
    #        ^ Active scanner    ^ Target               ^ Report name        ^ Max 10 min timeout
    profiles:
      - scan                    # Only runs with --profile scan flag
    networks:
      - zap-network

  # Optional: Add API scan service for Phase 2 of your project
  api-scan:
    image: zaproxy/zap-stable
    volumes:
      - ./reports:/zap/wrk:rw
    command: zap-api-scan.py -t http://juice-shop:3000/api-docs -f openapi -r api-scan-report.html
    #        ^ API scanner      ^ OpenAPI/Swagger URL        ^ Format  ^ Report
    profiles:
      - scan
    networks:
      - zap-network

networks:
  zap-network:
    driver: bridge # Standard Docker network driver
                   # Allows containers to communicate using service names